name,ring,quadrant,status,description
.tool-versions files,Adopt,Tools,no change,
Colima,Adopt,Tools,no change,"<p><strong><a href=""https://github.com/abiosoft/colima"">Colima</a></strong> is now our go-to alternative to Docker Desktop on macOS. We continue to use it on several projects to provision the Docker container run time in a <a href=""https://github.com/lima-vm/lima"">Lima VM</a>, to configure the Docker CLI on macOS and to handle port-forwarding and volume mounts. Colima can be configured to run <a href=""https://containerd.io/"">containerd</a> as its run time, which is also the run time on most managed <a href=""/radar/platforms/kubernetes"">Kubernetes</a> services, improving the important dev-prod parity.</p>"
dbt,Adopt,Tools,no change,"<p><a href=""https://www.getdbt.com/""><strong>dbt</strong></a> continues to be our tool of choice for data transformations in the ELT workflow. We like that it lends itself to engineering rigor and enables practices like modularity, testability and reusability of SQL-based transformations. dbt is available both as an open-source and commercial SaaS product and has a healthy ecosystem, including a community hub with packages for unit testing, data quality and data observability, to name a few. Packages worth highlighting include <a href=""/radar/languages-and-frameworks/dbt-expectations"">dbt-expectations</a> and <a href=""/radar/languages-and-frameworks/dbt-unit-testing"">dbt-unit-testing</a> which facilitate data quality checks and unit testing of the transformations, respectively. dbt <a href=""https://docs.getdbt.com/docs/supported-data-platforms"">integrates</a> well with a variety of cloud data warehouses, lakehouses and databases, including <a href=""/radar/platforms/snowflake"">Snowflake</a>, <a href=""/radar/platforms/bigquery"">BigQuery</a>, Redshift, Databricks and Postgres. When working with structured data where one can set up transformations as SQL, our teams prefer dbt — which is why we're moving it to Adopt.</p>"
OrbStack,Adopt,Tools,no change,"<p><strong><a href=""https://orbstack.dev/"">OrbStack</a></strong> is a way to run Docker containers on macOS; our developers have found it to be more lightweight, faster and simpler to set up and use than <a href=""https://www.docker.com/products/docker-desktop/"">Docker Desktop</a> and <a href=""/radar/platforms/colima"">Colima</a>. The tool is still under development and therefore has fewer features, but it's already showing some great potential with its simplicity and speed. You can also use OrbStack to create and manage Linux VMs on macOS.</p>"
Mocks Server,Assess,Tools,no change,"<p><strong><a href=""https://www.mocks-server.org/"">Mocks Server</a></strong> is a Node.js-based API mocking tool valued by our teams for its ability to replicate intricate API responses, headers and status codes. The dynamic response generation supports the simulation of diverse scenarios, which allows for the rigorous testing of API interactions. Mocks can be described as YAML or JSON and managed through the CLI, REST API or JavaScript code. Mocks Server's features include request matching, proxying and record-playback features, which facilitate the emulation of realistic API interactions. We particularly like the integration with Docker containers, which makes it easy to deploy the server consistently between environments so it can be versioned and maintained as another artifact of the ecosystem. Its straightforward approach aligns with our emphasis on simplicity and efficiency in development processes. We look forward to using Mocks Server more extensively as our testing strategy evolves along with our solutions.</p>"
Mermaid,Adopt,Tools,moved in,"<p><a href=""https://mermaid.js.org/""><strong>Mermaid</strong></a> lets you generate diagrams from a Markdown-like markup language. Since we last featured it in the Radar, Mermaid has added support for many more diagrams and <a href=""https://mermaid.js.org/ecosystem/integrations.html"">integrations</a> with source code repositories, IDEs and knowledge management tools. Notably, it's supported natively in popular source code repositories such as GitHub and GitLab, enabling the embedding of and easy updates to Mermaid diagrams in the middle of Markdown documentation. Many of our teams gravitate toward Mermaid as their diagram-as-code tool due to its ease of use, multitude of integrations and wide variety of supported diagram types that keep growing.</p>"
Continuous Delivery,Adopt,Techniques,no change,"<p>Continuous delivery focuses on maximizing automation including infrastructure as code, environment management and deployment automation to ensure your system is always ready for production.</p><p>It is about tightening your feedback loops and not putting off anything until the end. Continuous delivery is not the same as continuous deployment, which means deploying every change to production. The business can still pick and choose what and when to deploy.</p>"
OWASP Top 10 lists,Adopt,Techniques,moved in,"<p>The <a href=""https://owasp.org/www-project-top-ten/"">OWASP Top 10</a> has long been a go-to reference for the most critical security risks to web applications. Despite being well-known, we've previously written about it being underused in the software development process and cautioned against <a href=""/radar/techniques/ignoring-owasp-top-10"">ignoring OWASP Top 10</a>.</p><p>What is less well-known is that OWASP also publishes similar top 10 lists for other categories. The <a href=""https://owasp.org/www-project-top-10-for-large-language-model-applications/"">OWASP Top 10 list for LLMs</a>, whose first major version was released early August, highlights risks such as prompt injection, insecure output handling, training data poisoning and others that individuals and teams building LLM applications would do well to be aware of. OWASP has also recently released the second version of its <a href=""https://owasp.org/API-Security/editions/2023/en/0x00-header/"">OWASP Top 10 list for APIs</a>. Given the OWASP Top 10 lists' breadth of coverage (web applications, APIs, LLMs and <a href=""https://owasp.org/www-project-serverless-top-10/"">more</a>), quality and relevance to the continuously changing security landscape, we extend our previous recommendation to caution teams against <strong>ignoring OWASP Top 10 lists</strong>.</p>"
Decoupling Deployment from Release,Trial,Techniques,no change,"<p><em>Deployment</em> refers to the act of deploying a change to application components or infrastructure. Whereas <em>Release</em> should be used to refer to when a feature change is released to end users, with a business impact.</p><p>Using techniques such as feature toggles and dark launches, we should be able to deploy changes to production systems more frequently without releasing features. More-frequent deployments reduce the risk associated with change, while stakeholders retain control over when features are released to end users.</p>"
Lightweight Architecture Decision Records,Assess,Techniques,moved out,"<p>Much documentation can be replaced with highly readable code and tests. In a world of evolutionary architecture, however, it's important to record certain design decisions for the benefit of future team members as well as for external oversight.</p><p>Lightweight Architecture Decision Records is a technique for capturing important architectural decisions along with their context and consequences.</p><p>These details should be stored in source control, instead of a wiki or website, as then they can provide a record that remains in sync with the code itself.</p>"
Continuous Deployment,Trial,Techniques,no change,<p>Building on from a successful practice of <em>Continuous Delivery</em> we should explore an evolution towards Continuous <em>Deployment</em> where changes are automatically deployed to production without human intervention.</p><p>This should be paired with other practices such as <em>Decoupling deployment from release</em>.</p>
AWS Fargate,Adopt,Platforms,no change,"<p>AWS Fargate is the the docker-as-a-service option on AWS, is now widely available across regions. It's a great solution for situations in which teams, like ours, want to run Docker containers without having to manage EC2 instances.</p><p>It’s a particularly attractive option for migrating away from Elastic Beanstalk and promises better performance and faster deployments.</p>"
Buildkite,Trial,Platforms,moved in,<p>Buildkite is a self hosted CI/CD tool with an emphasis on simplicity and quick setup.</p><p>We’ve found the flexibility of running on our own (cloud) hardware and the level of control over the configuration of the build agents to be a significant improvement over Travis CI. The greater control offered by Buildkite allows us to more freely adapt it to our needs both as a build system and general job executor.</p>
GitHub Actions,Trial,Platforms,moved in,<p>GitHub Actions is a fully featured CI/CD platform with broad community support.</p>
Elastic Beanstalk,Hold,Platforms,no change,
Renovate,Trial,Platforms,no change,<p>Renovate is a tool for keeping dependencies up to date which supports a wide range of hosting services and programming languages.</p>
aero,Adopt,languages-and-frameworks,no change,
Cognitect AWS,Adopt,languages-and-frameworks,no change,
integrant,Adopt,languages-and-frameworks,no change,
kaocha,Adopt,languages-and-frameworks,no change,
malli,Adopt,languages-and-frameworks,no change,
Playwright,Trial,languages-and-frameworks,no change,"<p>With <strong><a href=""https://playwright.dev/"">Playwright</a></strong> you can write end-to-end tests that run in Chrome, Firefox and WebKit. By using the Chrome DevTools Protocol (CDP) Playwright can offer TRUE features and eliminate many of the issues seen with WebDriver. Chromium-based browsers implement CDP directly. To support Firefox and Webkit, though, the Playwright team has to submit patches to these browsers, which may sometimes limit the framework.</p><p>Playwright’s many features include: Built-in auto-waits, which result in tests that are more reliable and easier to understand; browser contexts, which let you test that persisting sessions across tabs work properly; and the ability to simulate notifications, geolocation and dark mode settings. Our teams are impressed with the stability Playwright brings to the test suite and like that they get feedback more quickly by running tests in parallel. Other features that set Playwright apart include better support for lazy loading and tracing. Although Playwright has some limitations — component support is currently experimental, for example — our teams consider it the go-to test framework and in some cases are migrating away from <a href=""/radar/tools/cypress"">Cypress</a> and <a href=""/radar/languages-and-frameworks/puppeteer"">Puppeteer</a>.</p>"
re-frame,Adopt,languages-and-frameworks,no change,
reitit,Adopt,languages-and-frameworks,no change,
Pedestal,Assess,languages-and-frameworks,no change,
Amazonica,Hold,languages-and-frameworks,no change,
Bedrock,Hold,languages-and-frameworks,no change,
Yada,Hold,languages-and-frameworks,no change,
OpenTelemetry,Trial,languages-and-frameworks,no change,"<p>We've been using <strong><a href=""https://opentelemetry.io/"">OpenTelemetry</a></strong> as a solution for a while now and recommended trying it in previous editions. Its ability to seamlessly capture, instrument and manage telemetry data across various services and applications has improved our observability stack. OpenTelemetry's flexibility and compatibility with diverse environments have made it a valuable addition to our toolkit. We're now particularly curious about the recent release of the <a href=""https://opentelemetry.io/docs/specs/otel/protocol/"">OpenTelemetry Protocol (OTLP)</a> specification, which includes both gRPC and HTTP. This protocol standardizes the format and transmission of telemetry data, promoting interoperability and simplifying integrations with other monitoring and analysis tools. As we continue to explore the integration potential of the protocol, we're evaluating its long-term impact on our monitoring and observability strategy and on the general monitoring landscape.</p>"
Portfolio,Trial,languages-and-frameworks,no change,"<p><a href=""https://github.com/cjohansen/portfolio"">Portfolio</a> is a “visual REPL” that aims to bring the best features of <a href=""https://github.com/storybookjs/storybook"">Storybook.js</a> to ClojureScript frontend application development.</p>"